- name: Check .rc files status in the home directory
  ansible.builtin.stat:
    path: "{{ ansible_env.HOME }}/{{ item }}"
  register: rc_files_status
  loop: "{{ system_configuration_rc_files2 }}"

- name: Link .rc files to home directory
  ansible.builtin.file:
    src: "{{ ansible_env.HOME }}/.dotfiles/{{ system_configuration_rc_files[loop.index0] }}"
    dest: "{{ ansible_env.HOME }}/{{ item.item }}" # The second 'item' is the original value of the rc_files2 variable.
    state: link
  loop: "{{ rc_files_status.results }}"
  when: not item.stat.exists or
        (item.stat.exists and not item.stat.islnk)

# - name: Link .rc files to the home directory if necessary
#   ansible.builtin.file:
#     src: "{{ ansible_env.HOME }}/.dotfiles/{{ system_configuration_rc_files[loop.index0] }}"
#     dest: "{{ ansible_env.HOME }}/{{ system_configuration_rc_files2[loop.index0] }}"
#     state: link
#   loop: "{{ rc_files_status.results }}"
#   when: >
#     not item.stat.exists or
#     (item.stat.exists and not item.stat.islnk)
#   loop_control:
#     index_var: loop.index0
#     label: "{{ system_configuration_rc_files2[loop.index0] }}"


# Assuming you have two lists:
#
# rc_files which contains file paths you want to link.
# rc_files_status.results which contains the status of each file after some checks.
#
# And you're in a task that's looping over rc_files_status.results. If you want
# to reference an item from rc_files that corresponds to the current item from
# rc_files_status.results, you need a way to match these items up. Since these
# lists are parallel and ordered the same, you use the loop index (loop.index0)
# to reference the corresponding item in rc_files.
