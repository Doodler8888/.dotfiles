- name: Setup new arch installation
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Get the name of the main user
      ansible.builtin.shell: "awk -F: '$3 == 1000 {print $1}' /etc/passwd"
      register: main_user
      changed_when: false

    - name: Create .ssh directory in the home directory of the main user
      ansible.builtin.file:
        path: "/home/{{ main_user.stdout }}/.ssh"
        state: directory
        mode: '0700'
        owner: "{{ main_user.stdout }}"
        group: "{{ main_user.stdout }}"

    - name: Create subdirectory 'keys' in the .ssh directory
      ansible.builtin.file:
        path: "/home/{{ main_user.stdout }}/.ssh/keys"
        state: directory
        mode: '0700'
        owner: "{{ main_user.stdout }}"
        group: "{{ main_user.stdout }}"

    - name: Create the ssh config file
      ansible.builtin.file:
        path: "/home/{{ main_user.stdout }}/.ssh/config"
        state: touch
        mode: '644'

    - name: Generate ssh key
      ansible.builtin.command: "ssh-keygen -t rsa -b 2048 -f /home/{{ main_user.stdout }}/.ssh/keys/git -q -N ''"
      args:
        creates: "/home/{{ main_user.stdout }}/.ssh/keys/git"  # 'creates' serves as a condition that tells Ansible to skip the command execution if the specified file or directory already exists.
      become: true
      become_user: "{{ main_user.stdout }}"

    - name: Create the ssh config file
      ansible.builtin.blockinfile:
        path: "/home/{{ main_user.stdout }}/.ssh/config"
        block: |
          Host *
              ServerAliveInterval 60
              ServerAliveCountMax 5

          Host github.com
              IdentityFile ~/.ssh/keys/git

          Host gitlab.com
              IdentityFile ~/.ssh/keys/git
        owner: "{{ main_user.stdout }}"
        group: "{{ main_user.stdout }}"
        mode: '0644'

    - name: Add name credential of the main user to git
      ansible.builtin.command: 'git config --global user.name "wurfkreuz"'

    - name: Add email credential of the main user to git
      ansible.builtin.command: 'git config --global user.email "wurfkreuz@mail.ru"'

    - name: Cat a file
      ansible.builtin.shell: cat /home/{{ main_user.stdout }}/.ssh/key/git.pub
      register: file_content

    - name: Print file content
      ansible.builtin.debug:
      msg: "{{ file_content.stdout }}"

# Add a line that prints out public key that i should add to git.

# By default, 'command' and shell tasks in Ansible are assumed to change the
# system state. "changed_when: false" - this tells Ansible that the task does
# not change the system state, and it should always report "unchanged" when this
# task is executed.

# When you use Ansible modules like shell, command, or script to execute
# commands on remote hosts, the output and other details of the command
# execution are stored in a complex data structure rather than a simple string.
# This is because Ansible provides more than just the raw output of the command;
# it also provides metadata about the execution, such as whether the command
# succeeded, its standard error output, and more.
# To access the actual output of the command, you use .stdout with the variable
# name because that's where the standard output is stored within the variable's
# data structure. If you were to reference just the name of the variable without
# .stdout, you would be referring to the entire data structure, which includes
# all the metadata mentioned above, not just the output of the command.
