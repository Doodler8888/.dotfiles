-- This should apperently enable autocompletion, but there is non.
--  vim.api.nvim_create_autocmd({ "VimEnter" }, {
-- callback = function()
-- 	local clients = vim.lsp.get_clients()
-- 	for _, client in ipairs(clients) do
-- 		local id = client.id
-- 		vim.lsp.completion.enable(true, id, 1, { autotrigger = true })
-- 		return
-- 	end
-- end,
-- })


-- Built-in autocompletion hack
-- -- A helper function to trigger built-in completions based on context
-- function _G.auto_complete_trigger()
--   -- Get the current line and cursor position (column is 1-indexed)
--   local col = vim.fn.col('.') - 1
--   local line = vim.fn.getline('.')
--   local before_cursor = line:sub(1, col)
--
--   -- Only trigger if there's something non-whitespace before the cursor.
--   if not before_cursor:match("%S") then
--     return
--   end
--
--   -- Don't trigger if the popup menu is already visible.
--   if vim.fn.pumvisible() ~= 0 then
--     return
--   end
--
--   -- If it looks like a file path (contains '/' or '\' or starts with '~' or '.'),
--   -- trigger file-path completion (<C-x><C-f>).
--   if before_cursor:find("[/\\]") or before_cursor:find("^[~%.]") then
--     vim.api.nvim_feedkeys(
--       vim.api.nvim_replace_termcodes("<C-x><C-f>", true, false, true),
--       "n",
--       true
--     )
--   -- Else, if an omni-completion function is set (for code),
--   -- trigger omni-completion (<C-x><C-o>).
--   elseif vim.bo.omnifunc and vim.bo.omnifunc ~= "" then
--     vim.api.nvim_feedkeys(
--       vim.api.nvim_replace_termcodes("<C-x><C-o>", true, false, true),
--       "n",
--       true
--     )
--   -- Otherwise, fall back to keyword (buffer) completion (<C-n>).
--   else
--     vim.api.nvim_feedkeys(
--       vim.api.nvim_replace_termcodes("<C-x><C-n>", true, false, true),
--       "n",
--       true
--     )
--   end
-- end
--
-- -- Use the TextChangedI event (fires after text changes in Insert mode) to trigger our function
-- vim.api.nvim_create_autocmd("TextChangedI", {
--   callback = function()
--     _G.auto_complete_trigger()
--   end,
-- })
