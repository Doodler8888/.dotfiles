-- This file uses a robust, late-loading, event-driven architecture
-- to prevent the statusline from being overwritten by other plugins.

local M = {}

-- Data calculation functions
local function calculate_diagnostic_string(bufnr)
    if not bufnr or not vim.api.nvim_buf_is_valid(tonumber(bufnr)) then return "" end
    local local_errors = vim.diagnostic.get(bufnr, {severity = vim.diagnostic.severity.ERROR})
    local local_warnings = vim.diagnostic.get(bufnr, {severity = vim.diagnostic.severity.WARN})
    local global_errors = vim.diagnostic.get(nil, {severity = vim.diagnostic.severity.ERROR})
    local global_warnings = vim.diagnostic.get(nil, {severity = vim.diagnostic.severity.WARN})
    local error_str = ""
    if #local_errors > 0 or #global_errors > 0 then error_str = "E:" .. #local_errors .. "(" .. #global_errors .. ")" end
    local warn_str = ""
    if #local_warnings > 0 or #global_warnings > 0 then warn_str = "W:" .. #local_warnings .. "(" .. #global_warnings .. ")" end
    return error_str .. " " .. warn_str
end

local function calculate_git_branch()
    local branch = vim.fn['gitbranch#name']()
    if branch ~= '' then return '[' .. branch .. ']' end
    return ''
end

-- Core update function that populates window-local variables.
-- This function is made public on the module to be callable from an autocommand.
function M.update_status()
    local bufnr = vim.fn.bufnr('%')
    vim.w.statusline_diagnostics = calculate_diagnostic_string(bufnr)
    vim.w.statusline_git = calculate_git_branch()
end

-- The single entry point: this function runs only once, after Neovim has fully loaded.
local function setup_statusline_once()
    -- 1. Set the statusline option itself.
    -- It's a simple string that reads window-local variables.
    vim.o.statusline = table.concat({
        '%{winnr()}',
        ' ',
        '%f', -- Use the reliable path item.
        ' ',
        '%{get(w:, "statusline_git", "")}',
        '%=', -- Right-align the rest.
        '%{get(w:, "statusline_diagnostics", "")}',
        ' '
    }, '')

    -- 2. Create the autocommands that will keep the statusline fresh during use.
    vim.api.nvim_create_augroup('custom_statusline_updater', { clear = true })
    vim.api.nvim_create_autocmd({ 'WinEnter', 'BufEnter', 'DiagnosticChanged' }, {
        group = 'custom_statusline_updater',
        pattern = '*',
        -- This command calls the public update function from this module.
        command = 'lua require("user.statusline").update_status()',
    })

    -- 3. Manually trigger an update for the initial window.
    M.update_status()
end

-- The trigger: run the setup function once Neovim has fully entered.
vim.api.nvim_create_autocmd('VimEnter', {
    pattern = '*',
    once = true,
    callback = setup_statusline_once,
})

return M