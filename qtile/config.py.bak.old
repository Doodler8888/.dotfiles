from libqtile import bar, layout, widget, hook
from libqtile.config import Click, Drag, Group, Key, Match, Screen
from libqtile.lazy import lazy
from libqtile.utils import guess_terminal
from libqtile.widget import ThermalSensor, CPU, Memory
import os


@hook.subscribe.startup_once
def startup():
    import subprocess

    os.system("feh --bg-scale ~/Pictures/1920x1080.jpg")
    os.system("setxkbmap -option caps:swapescape")
    os.system('setxkbmap -layout us,ru -variant colemak, -option grp:alt_shift_toggle')
    os.system("xrandr --output HDMI-A-0 --mode 1920x1080 --rate 143.98")
    os.system("opera --new-window &")
    os.system("alacritty &")
    subprocess.Popen(['telegram-desktop'])
    subprocess.Popen(['vivaldi-stable'])


mod = "mod4"
terminal = guess_terminal()
# os.environ["BROWSER"] = "vivaldi-stable"

keys = [
    # A list of available commands that can be bound to keys can be found
    # at https://docs.qtile.org/en/latest/manual/config/lazy.html
    # Switch between windows
    # Key([], "XF86AudioMute", lazy.spawn("amixer -q set Master toggle")),
    # Key([], "XF86AudioLowerVolume", lazy.spawn("amixer -c -0 sset Master 1- unmute")),
    # Key([], "XF86AudioLowerVolume", lazy.spawn("amixer -c -0 sset Master 1+ unmute")),
    Key([mod], "Home", lazy.spawn("scrot /tmp/screenshot.png -e 'convert $f png:- | xclip -selection clipboard -t image/png -i; rm $f'")),
    Key([mod], "Left", lazy.layout.swap_column_left()),
    Key([mod], "Right", lazy.layout.swap_column_right()),
    # Sound volume up/down
    Key([], "XF86AudioRaiseVolume", lazy.spawn("pactl set-sink-volume @DEFAULT_SINK@ +5%")),
    Key([], "XF86AudioLowerVolume", lazy.spawn("pactl set-sink-volume @DEFAULT_SINK@ -5%")),
    Key([], "XF86AudioMute", lazy.spawn("pactl set-sink-mute @DEFAULT_SINK@ toggle")),
    # Application launch
    Key([], "Print", lazy.spawn("/home/wurfkreuz/.config/qtile/flameshot.sh")),
    Key([mod], "t", lazy.spawn("telegram-desktop")),
    Key([mod, "shift"], "b", lazy.spawn("opera")),
    Key([mod], "b", lazy.spawn("vivaldi-stable")),
    Key([mod], "d", lazy.spawn("dolphin")),
    Key([mod], "v", lazy.spawn("/opt/windscribe/Windscribe")),
    #
    Key([mod, "control"], "1", lazy.window.togroup("1")),
    Key([mod, "control"], "2", lazy.window.togroup("2")),
    Key([mod, "control"], "3", lazy.window.togroup("3")),
    Key([mod, "control"], "4", lazy.window.togroup("4")),
    Key([mod], "h", lazy.layout.left(), desc="Move focus to left"),
    Key([mod], "l", lazy.layout.right(), desc="Move focus to right"),
    Key([mod], "j", lazy.layout.down(), desc="Move focus down"),
    Key([mod], "k", lazy.layout.up(), desc="Move focus up"),
    Key([mod], "space", lazy.layout.next(), desc="Move window focus to other window"),
    # Move windows between left/right columns or move up/down in current stack.
    # Moving out of range in Columns layout will create new column.
    Key([mod, "shift"], "h", lazy.layout.shuffle_left(), desc="Move window to the left"),
    Key([mod, "shift"], "l", lazy.layout.shuffle_right(), desc="Move window to the right"),
    Key([mod, "shift"], "j", lazy.layout.shuffle_down(), desc="Move window down"),
    Key([mod, "shift"], "k", lazy.layout.shuffle_up(), desc="Move window up"),
    # Grow windows. If current window is on the edge of screen and direction
    # will be to screen edge - window would shrink.
    Key([mod, "control"], "h", lazy.layout.grow_left(), desc="Grow window to the left"),
    Key([mod, "control"], "l", lazy.layout.grow_right(), desc="Grow window to the right"),
    Key([mod, "control"], "j", lazy.layout.grow_down(), desc="Grow window down"),
    Key([mod, "control"], "k", lazy.layout.grow_up(), desc="Grow window up"),
    Key([mod], "n", lazy.layout.normalize(), desc="Reset all window sizes"),
    # Toggle between split and unsplit sides of stack.
    # Split = all windows displayed
    # Unsplit = 1 window displayed, like Max layout, but still with
    # multiple stack panes
    Key(
        [mod, "shift"],
        "Return",
        lazy.layout.toggle_split(),
        desc="Toggle between split and unsplit sides of stack",
    ),
    Key([mod], "Return", lazy.spawn(terminal), desc="Launch terminal"),
    # Toggle between different layouts as defined below
    Key([mod], "Tab", lazy.next_layout(), desc="Toggle between layouts"),
    Key([mod], "w", lazy.window.kill(), desc="Kill focused window"),
    Key([mod, "control"], "r", lazy.reload_config(), desc="Reload the config"),
    Key([mod, "control"], "q", lazy.shutdown(), desc="Shutdown Qtile"),
    Key([mod], "r", lazy.spawncmd(), desc="Spawn a command using a prompt widget"),
]

groups = [Group(i) for i in "123456789"]

groups[1].matches = [Match(wm_class=["Alacritty"])]
groups[2].matches = [Match(wm_class=["Vivaldi-stable"])]
groups[3].matches = [Match(wm_class=["TelegramDesktop"])]

for i in groups:
    keys.extend(
        [
            # mod1 + letter of group = switch to group
            Key(
                [mod],
                i.name,
                lazy.group[i.name].toscreen(),
                desc="Switch to group {}".format(i.name),
            ),
            # mod1 + shift + letter of group = switch to & move focused window to group
            Key(
                [mod, "shift"],
                i.name,
                lazy.window.togroup(i.name, switch_group=True),
                desc="Switch to & move focused window to group {}".format(i.name),
            ),
            # Or, use below if you prefer not to switch to that group.
            # # mod1 + shift + letter of group = move focused window to group
            # Key([mod, "shift"], i.name, lazy.window.togroup(i.name),
            #     desc="move focused window to group {}".format(i.name)),
        ]
    )

layouts = [
    # layout.Columns(border_focus_stack=["#44475a", "#282a36"], border_width=2),
    layout.Columns(border_focus="#44475a", border_normal="#00000000", border_width=1, margin=1),
    # Try more layouts by unleashing below layouts.
    # layout.Stack(num_stacks=2),
    # layout.Bsp(),
    # layout.Matrix(),
    # layout.MonadTall(),
    # layout.MonadWide(),
    # layout.RatioTile(),
    # layout.Tile(),
    # layout.TreeTab(),
    # layout.VerticalTile(),
    # layout.Zoomy(),
]

widget_defaults = dict(
    font="Noto Sans Mono Bold",
    fontsize=15,
    padding=3,
)
extension_defaults = widget_defaults.copy()

colors = [
    ["#282828", "#282828"], # panel background
    ["#3c3836", "#3c3836"], # background for current screen tab
    ["#504945", "#504945"], # font color for group names
    ["#bdae93", "#bdae93"], # border line color for current tab
    ["#d5c4a1", "#d5c4a1"], # border line color for other tab and odd widgets
    ["#ebdbb2", "#ebdbb2"], # font color for group names
    ["#fbf1c7", "#fbf1c7"], # backbround for even widgets
    ["#7c6f64", "#7c6f64"], # background color for inactive screens
    ["#83a598", "#83a598"], # light blue for active window numbers
    ["#d5c4a1", "#d5c4a1"], # light orange for the frame around the numbers
    ["#8ec07c", "#8ec07c"]  # light green for the annotation text
]

screens = [
    Screen(
        bottom=bar.Bar(
            [
                widget.GroupBox(
                    active=colors[8], 
                    inactive=colors[7], 
                    this_current_screen_border=colors[9], 
                    this_screen_border=colors[4], 
                    other_current_screen_border=colors[0], 
                    other_screen_border=colors[0], 
                    foreground=colors[10], 
                    background=colors[0]
                ),
                widget.Prompt(),
                widget.WindowName(foreground=colors[10], background=colors[0]),
                widget.Systray(background=colors[0]),
                widget.ThermalSensor(foreground=colors[10], background=colors[0]),
                widget.CPU(foreground=colors[10], background=colors[0]),
                widget.Memory(foreground=colors[10], background=colors[0]),
            ],
            24,
            background=colors[0]
        ),
    ),
]

# Drag floating layouts.
mouse = [
    Drag([mod], "Button1", lazy.window.set_position_floating(), start=lazy.window.get_position()),
    Drag([mod], "Button3", lazy.window.set_size_floating(), start=lazy.window.get_size()),
    Click([mod], "Button2", lazy.window.bring_to_front()),
]

dgroups_key_binder = None
dgroups_app_rules = []  # type: list
follow_mouse_focus = True
bring_front_click = False
cursor_warp = False
floating_layout = layout.Floating(
    float_rules=[
        # Run the utility of `xprop` to see the wm class and name of an X client.
        *layout.Floating.default_float_rules,
        Match(wm_class="confirmreset"),  # gitk
        Match(wm_class="makebranch"),  # gitk
        Match(wm_class="maketag"),  # gitk
        Match(wm_class="ssh-askpass"),  # ssh-askpass
        Match(title="branchdialog"),  # gitk
        Match(title="pinentry"),  # GPG key password entry
    ]
)
auto_fullscreen = True
focus_on_window_activation = "smart"
reconfigure_screens = True

# If things like steam games want to auto-minimize themselves when losing
# focus, should we respect this or not?
auto_minimize = True

# When using the Wayland backend, this can be used to configure input devices.
wl_input_rules = None

# XXX: Gasp! We're lying here. In fact, nobody really uses or cares about this
# string besides java UI toolkits; you can see several discussions on the
# mailing lists, GitHub issues, and other WM documentation that suggest setting
# this string if your java app doesn't work correctly. We may as well just lie
# and say that we're a working one by default.
#
# We choose LG3D to maximize irony: it is a 3D non-reparenting WM written in
# java that happens to be on java's whitelist.
wmname = "LG3D"
