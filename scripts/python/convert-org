#!/bin/env python

import re
import sys

input_file = sys.argv[1]
output_file = sys.argv[2]

with open(input_file, "r") as infile, open(output_file, "w") as outfile:
    for line in infile:
        modified_line = line
        modified_line = re.sub(r"^\* ", "# ", modified_line)
        modified_line = re.sub(r"^\*\* ", "## ", modified_line)
        modified_line = re.sub(r"^\*\*\* ", "### ", modified_line)
        modified_line = re.sub(r"^\*\*\*\* ", "#### ", modified_line)
        modified_line = re.sub(r"^\*\*\*\*\* ", "##### ", modified_line)

        # Using '?' after '.*' allows it to be non-greedy, meaning it will match
        # the shortest possible string that satisfies the overall pattern.
        # Otherwise it will capture anything between two markup'ed words.
        modified_line = re.sub(r"~(?!\s)(.*?)(?<!\s)~", r"`\g<1>`", modified_line)
        # modified_line = re.sub(r"~(?!\s)(.*?)(?<!\s)~", r"`\g<1>`", modified_line)

        # If i understand correctly, the point of the '(?:)' syntax is to
        # provide an ability to group patterns ('^' and 's+' in this case) so
        # that it is possible to apply logical operators. Basically it's a way
        # to alter meaning of brackets from being a syntax for creating capture
        # groups to something else. So the first bracket pair at the very
        # beginning is not a capture group.
        modified_line = re.sub(r"(^|\s+)(\/([^\/]+)\/)(?=\s|$)", r"\g<1>*\g<3>*", modified_line)
        modified_line = re.sub(r"(^|\s+)#\+begin_src", r"\g<1>```", modified_line)
        modified_line = re.sub(r"(^|\s+)#\+end_src", r"\g<1>```", modified_line)

        outfile.write(modified_line)

