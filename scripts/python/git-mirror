#!/bin/env python

import os
import subprocess
# import sys
import logging

home = os.environ["HOME"]


secret_dotfiles_dir = os.path.join(home, ".secret_dotfiles")
dotfiles_dir = os.path.join(home, ".dotfiles")
emacs_dir = os.path.join(home, ".emacs.d")

repos=[secret_dotfiles_dir, dotfiles_dir, emacs_dir]

repos_dictionary = [
    {"path": dotfiles_dir, "default_url": "git@gitlab.com:Doodler8888/dotfiles.git"},
    {"path": emacs_dir, "default_url": "git@gitlab.com:Doodler8888/emacs.git"},
    {"path": secret_dotfiles_dir, "default_url": "git@gitlab.com:Doodler8888/secret_dotfiles.git"},
]

# The 'logging' module automatically creates 
log_file_path = os.path.join(home, ".var/log/git-mirror/logs.log")
log_file_dir = os.path.join(home, ".var/log/git-mirror/")

if os.path.exists(log_file_path):
    pass
else:
    os.makedirs(log_file_dir)
    # I don't need to create a file, because the 'logging' module automatically
    # creates it, but i need to create a directory
    # with open(log_file_path, "w"): # Using 'w' allows to create a file if it doesn't exist.
    #     pass

# logger = logging.getLogger(__logger__)
logging.basicConfig(format="[%(levelname)s] %(asctime)s - %(message)s", filename=log_file_path, encoding='utf-8', level=logging.DEBUG) # 'level=logging.DEBUG' means that the minimal logging treshold is 'DEBUG'.

def check_remote_commit(repos_dictionary):
    repo_path = repos_dictionary["path"]
    gitlab_remote_url = repos_dictionary["default_url"]
    # When using the logging module, newlines are inserted in a way i don't
    # understand. For instance, this newline doesn't get inserted for the first
    # time in the loop, but then it does.
    logging.info(f"\nExtracting hashes for {repo_path}")
    try:
        github_output = subprocess.check_output(f"cd {repo_path} && git ls-remote origin master", shell=True, text=True)
        github_hash = github_output.split()[0] if github_output else None
    except subprocess.CalledProcessError as e:
        logging.error(f"Wasn't able to get github hash: {e}")
        github_hash = None # I have to repaet it for try and exception because if the command fails, it goes straight to exception, which makes github_hash to not exist at all.
    logging.info(f"\nThis is the github hash {github_hash}")
    # print(f"\nThis is the github hash {github_hash}")
    try:
        gitlab_output = subprocess.check_output(f"cd {repo_path} && git ls-remote gitlab main", shell=True, text=True)
        gitlab_hash = gitlab_output.split()[0] if gitlab_output else None
    except subprocess.CalledProcessError as e:
        logging.error(f"Wasn't able to get gitlab hash: {e}")
        gitlab_hash = None
    logging.info(f"\nThis is the gitlab hash {gitlab_hash}")
    # print(f"This is the gitlab hash {gitlab_hash}")
    if not gitlab_hash:
        logging.warning(f"Remote {gitlab_remote_url} doesn't have any hash: {gitlab_hash}\nTrying to push to gitlab remote.")
        try:
            subprocess.check_output(f"cd {repo_path} && git push gitlab master:main", shell=True, text=True)
        except subprocess.CalledProcessError as e:
            logging.error(f"Wasn't able to push to the gitlab remote: {e}")
    else:
        if github_hash == gitlab_hash:
            logging.info(f"\nHashes are the same:\ngitlab hash:{gitlab_hash}\ngithub hash:{github_hash}\n")
        else:
            logging.info(f"\nHashes aren't the same:\ngitlab hash:{gitlab_hash}\ngithub hash:{github_hash}\nPushing changes to the gitlab remote of {repo_path}.")
            try:
                output = subprocess.check_output(f"cd {repo_path} && git push gitlab master:main", shell=True, text=True)
                logging.info(f"This is the output {output}")
            except subprocess.CalledProcessError as e:
                logging.error(f"Wasn't able to push to the gitlab remote: {e}")

with open(log_file_path, "a") as f:
    f.write("=======================================================================")

for entry in repos_dictionary:
    check_remote_commit(entry)



# for repo in repos:
#     master_hash = subprocess.check_output(f"cd {repo} && git ls-remote origin master", shell=True, text=True).split()[0]
#     print(f"This is the master hash {master_hash}")
#     gitlab_hash = subprocess.check_output(f"cd {repo} && git ls-remote gitlab master", shell=True, text=True).split()[0]
#     print(f"This is the gitlab hash {gitlab_hash}")
#     if master_hash != gitlab_hash:
#         subprocess.run(f"cd {repo} && git push gitlab master:main", shell=True, check=True, capture_output=True)


