#!/usr/bin/env raku

use v6.e.PREVIEW;
use Config::TOML;

sub MAIN($filename) {
  my $file-content = slurp $filename;
  my %toml = from-toml({ slurp $filename }());

  my %versions = %toml<dependencies>.kv.map: -> $lib, $version {
      my $output = qqx/cargo search $lib/;
      my $old-version = $version ~~ Hash ?? $version<version> !! $version;
      my $new-version = ($output.lines ~~ rx/'"'(.+)'"'/)[0].Str;
      $lib => { old-version => $old-version, new-version => $new-version }
  }

  my @lines = $file-content.lines;
  for %versions.keys -> $lib {
  my @lines = 
      my $old-version = %versions{$lib}<old-version>;
      my $new-version = %versions{$lib}<new-version>;

      for @lines.keys -> $index {
	  my $line = @lines[$index];
	  if $line.contains(/^"$lib"/) {
	      @lines[$index] = $line.subst($old-version, $new-version);
	  }
      }
  }

   my $new-content = @lines.join("\n");
   spurt $filename, $new-content;  # 'spurt' writes a string to a file, overwriting the file if it already exists
}


# When i use .keys on a hash, it returns an iterator that produces just the keys
# of the hash. This is useful when you primarily care about the keys themselves
# and not necessarily their associated values.
# If i would use .kv instead i would get '$lib (new, old)', by using .keys i get
# only (new, old).

# The error you're encountering, "Cannot assign to a readonly variable or a
# value," occurs because the $line variable in your loop is immutable by default.
# In Raku, variables that come from iterating over a list or array are considered
# readonly within the loop, so you cannot directly modify $line with operations
# like assignment (=) or methods that modify the variable in place, such as
# .subst.
