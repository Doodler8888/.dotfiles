#!/usr/bin/env raku

use v6.e.PREVIEW;
use Telegram;


sub MAIN() {

  my $bot = Telegram::Bot.new(%*ENV<NOTIFY_TOKEN>);
  my Int $chat_id = 388104355;
  my @messages;
  # my $message;

  my @repos = shell("find ~/ -type d -name '.git' -not -path '*/.source/*' -not -path '*/.antigen/*' -not -path '*/.cargo/*' -not -path '*/elpaca/*' -not -path '*/.cache/*' -not -path '*/.local/*' -not -path '*/.share/*' -printf '%p\n' 2>/dev/null", :out)
  .out.slurp(:close).lines.map(*.chomp); # Apply chomp to each line

  for @repos -> $repo-dir {
    my $status = shell("git -C {$repo-dir.IO.parent} status --porcelain", :out).out.slurp(:close);

    # If there's any output from `git status --porcelain`, there are uncommitted changes
    if $status.chars {
      my $last-commit-date = shell("git -C {$repo-dir.IO.parent} log -1 --format=%cd", :out)
      .out.slurp(:close).chomp;
      my $message = "Repository with uncommitted changes: {$repo-dir.IO.parent}
                     \nLast commit date: $last-commit-date";
      @messages.push($message);
      # $bot.sendMessage($chat_id, $message);
    }
  }
  my $combined_message = @messages.join("\n\n");
  # say "Attempting to send message with @messages.elems() elements.";
  $bot.sendMessage($chat_id, $combined_message) if @messages;
}



# The shell function in Raku executes an external command and returns a Proc
# object. By default, the standard output (STDOUT) of the executed command is
# directed to the STDOUT of the Raku process itself, which typically means it's
# printed to your terminal. This default behavior does not capture the output
# within the Proc object for later access or manipulation in your program.
# The :out adverb modifies this behavior. When you specify :out, you instruct
# Raku to capture the command's STDOUT and make it accessible through the Proc
# object, specifically via its .out attribute. 

# By using .slurp on this IO::Pipe object, you are reading the entire stream of data (the command's output) and converting it into a Str (string).
# The :close named argument is used with .slurp to ensure that the IO::Pipe is closed after all data has been read from it. This is an important step for resource management.
# .chomp is used to remove any trailing newline characters from the output.

# In Raku, when you have a path like /directory/something/.git and you apply
# .IO.parent to it, you are essentially navigating up one level in the directory
# structure from the .git directory, resulting in /directory/something/.

# The output format with --porcelain is designed to be easily parsed by scripts.
# It typically avoids unnecessary decorations and presents the information in a
# straightforward, machine-readable format.

# map(*.chomp) is a shorthand for 'map -> $_ { $_.chomp }'


# sub MAIN($message)
# {
#   my $bot = Telegram::Bot.new(%*ENV<NOTIFY_TOKEN>);
#
#   $bot.start(2); # Starts scanning for updates every second; defaults to every 2 seconds
#
#   my $msgTap = $bot.messagesTap; # A tap for updates
#
#   react {
#     whenever $msgTap -> $msg {
#
#       # my $chat_id = $msg.chat.id;
#       # my $text = $msg.text;
#
#       # Use the sendMessage method to echo the message back to the chat
#       # $bot.sendMessage($msg.chat.id, $msg.text);
#       $bot.sendMessage($msg.chat.id, $msg.text);
#
#       # # Optionally, print to the terminal as well (as before)
#       # say "{$msg.sender.username}: $text in $chat_id";
#     }
#     whenever signal(SIGINT) {
#       $bot.stop;
#       exit;
#     }
#   }
# }


# # Assuming $bot is your Telegram::Bot object
# say $bot.^methods;
#
# say $bot.^methods.grep(*.name.substr(0, 1) ne '!');

# # Assuming $bot is your object and 'sendMessage' is the method you're interested in
# my $methods = $bot.^can('sendMessage');
#
# # Check if $methods is a List of Method objects
# if $methods ~~ List {
#     # Iterate over each Method object in the list
#     for @$methods -> $method {
#         say $method.signature;
#     }
# } elsif $methods.defined {
#     # $methods is a single Method object, not a List
#     say $methods.signature;
# } else {
#     say "Method 'sendMessage' not found on the object";
# }
